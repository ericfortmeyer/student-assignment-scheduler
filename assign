<?php

use TalkSlipSender\Utils\PDFAssignmentFormWriter;
use TalkSlipSender\Utils\ScheduleWriter;
use TalkSlipSender\Utils\MailSender;
use TalkSlipSender\Models\ListOfContacts;

use PHPMailer\PHPMailer\PHPMailer;
use Dotenv\Dotenv;
use Smalot\PdfParser\Parser;

use function TalkSlipSender\Functions\createJsonSchedulesFromWorkbooks;
use function TalkSlipSender\Functions\sendEmails;
use function TalkSlipSender\Functions\decryptedPassword;
use function TalkSlipSender\Functions\scheduleRecipientError;
use function TalkSlipSender\Functions\contactSetupError;
use function TalkSlipSender\Functions\makeDirectories;
use function TalkSlipSender\Functions\writeSchedule;
use function TalkSlipSender\Functions\CLI\writeAssignmentForms;
use function TalkSlipSender\Functions\CLI\createJsonAssignments;
use function TalkSlipSender\Functions\CLI\yes;
use function TalkSlipSender\Functions\CLI\no;
use function TalkSlipSender\Functions\CLI\red;
use function TalkSlipSender\Functions\CLI\green;
use function TalkSlipSender\Functions\CLI\prompt;

require "autoload.php";

// load configuration files
$config_path = "config/";
$config_file = "${config_path}config.php";
$config = require $config_file;
$path_config = require "${config_path}path_config.php";
$schedule_recipients_config_file = "${config_path}schedule_recipients.php";
$contacts_file = "${config_path}contacts.php";


// creates an empty contacts file if one has not been created yet
!file_exists($contacts_file) && file_put_contents($contacts_file, "<?php" . PHP_EOL . "return [];" . PHP_EOL);

// the contacts file and schedule recipients must be setup first
empty($contacts = require $contacts_file)
    && exit(red(contactSetupError($contacts_file)));
empty($schedule_recipients = require $schedule_recipients_config_file)
    && exit(red(scheduleRecipientError($schedule_recipients_config_file)));

$Dotenv = new Dotenv(__DIR__);
$Dotenv->load();
$Dotenv->required([
    "from_email",
    "from_email_password",
    "from_email_nonce",
    "from_email_key",
    "smtp_host"
]);
$WorkbookParser = new Parser();
$AssignmentFormWriter = new PDFAssignmentFormWriter($config);
$ScheduleWriter = new ScheduleWriter($config);
$ListOfContacts = new ListOfContacts();
$MailSender = new MailSender(
    new PHPMailer(true),
    getenv("from_email"),
    decryptedPassword(),
    getenv("smtp_host")
);

/**
 * Parse pdf schedules into json
 *
 * Data derived from the json schedules are used
 * when the user of the application schedules assignments
 * and for writing out assignment forms
 */
$json_schedules_set = createJsonSchedulesFromWorkbooks(
    $WorkbookParser,
    $path_config["path_to_workbooks"],
    $path_config["path_to_data"]
);

$hasScheduleAlreadyBeenCompleted = function (string $month) use ($path_config) {
    $schedule_filename = "{$path_config["path_to_schedules"]}/${month}.pdf";

    return file_exists($schedule_filename);
};


/**
 * These strings will be modified by an anonymous function
 */
$path_to_json_schedules = "{$path_config["path_to_data"]}/";
$path_to_json_assignments = "{$path_config["path_to_assignments"]}/";

/**
 * The meeting night is written on the schedule and assignment forms.
 * It is derived from adding to the first day of the month found on
 * the date in the worksheet.  The meeting night must be configured for
 * the user in order to determine the interval spec needed for DateInterval.
 */
$meeting_night = $config["meeting_night"];
$interval_spec_for_meeting_night = $config["interval_spec"][$meeting_night];

$createJsonAssignments = function ($carry, int $year) use (
    $AssignmentFormWriter,
    &$path_to_json_schedules,
    &$path_to_json_assignments,
    $hasScheduleAlreadyBeenCompleted,
    $interval_spec_for_meeting_night) {

    $path_to_json_schedules .= $year;
    $path_to_json_assignments .= $year;
    /**
     * Interact with the user of the application to schedule assignments
     *
     * A json file is created for each week of assignments
     */
    createJsonAssignments(
        $path_to_json_schedules,
        $path_to_json_assignments,
        $hasScheduleAlreadyBeenCompleted,
        $interval_spec_for_meeting_night
    );
};


/**
 * An instance of \Ds\Set so the values will be unique
 * @var \Ds\Set $json_schedules_set
 */
$json_schedules_set->remove(null);
$json_schedules_set->reduce($createJsonAssignments);



/**
 * Create assignment forms
 *
 * The json files representing weeks of assignments are used
 * to generate pdf assignment forms
 */
$which_months = writeAssignmentForms(
    $AssignmentFormWriter,
    $path_to_json_assignments,
    $path_to_json_schedules,
    $hasScheduleAlreadyBeenCompleted,
    false
);


/**
 * Were assignments scheduled?
 */
current($which_months)
    ?? exit(green("It looks like you are all up-to-date.\r\nNo schedules were created.  Good Bye\r\n"));


/**
 * Create the schedule for the month
 *
 * Uses the json schedule and the json assignment files
 * to generate a pdf schedule for the month
 */
$schedule_filename = writeSchedule(
    $ScheduleWriter,
    $path_to_json_assignments,
    $path_to_json_schedules,
    current($which_months)
);


$user_response = readline(
    prompt("Do you want to send the emails")
);


yes($user_response)
    && sendEmails(
        $MailSender,
        $ListOfContacts,
        $contacts,
        $config["assignment_forms_destination"],
        $schedule_recipients,
        $schedule_filename
    );

no($user_response)
    && print red("Ok. Emails were not sent.\r\n");
