<?php declare(strict_types=1);
/**
 * This file is part of student-assignment-scheduler.
 *
 * Copywright (c) Eric Fortmeyer.
 * Licensed under the MIT License. See LICENSE in the project root folder for license information.
 *
 * @author Eric Fortmeyer <e.fortmeyer01@gmail.com>
 */
 declare(strict_types=1);

namespace StudentAssignmentScheduler\Notification\Functions;

use StudentAssignmentScheduler\{
    Contact,
    MaybeContact,
    Notification\MailSender
};
use Psr\Log\LoggerInterface;
use \Ds\Map;

/**
 * Sends assignment forms
 *
 * For each file found in the assignment form folder
 * (1) Use the name of the assignment file to determine who the recipient is
 * (2) Attach file and send email to the recipient
 * (3) Delete the file from the folder
 *
 * @param MailSender $MailSender
 * @param Map $MapOfAttachmentFilenamesToTheirRecipients
 * @param LoggerInterface $log
 * @return void
 */
function sendAssignmentForms(
    MailSender $MailSender,
    Map $MapOfAttachmentFilenamesToTheirRecipients,
    LoggerInterface $log
): void {

    $emailAssignmentForms = function (
        string $filename_of_attachment,
        Contact $contact
    ) use (
        $MailSender,
        $log
    ) {
        try {
            $MailSender
                ->addBody("Dear {$contact->firstName()},\r\n\r\nHere's your next assignment.\r\n\r\nThanks!")
                ->withRecipient($contact->emailAddress(), $contact->fullname())
                ->addAttachment($filename_of_attachment)
                ->send();
            $log->info(
                "Email sent: {email_address}",
                ["email_address" => $contact->emailAddress()]
            );
            /**
             * Delete attachment
             *
             * Since assignment slips are created and this function is called each time the script is run,
             * the file needs to be deleted or duplicates will be created
             */
            unlink($filename_of_attachment);
            $log->info(
                "Assignment slip deleted"
            );
        } catch (\Throwable $e) {
            $log->critical(
                "Email error: {exception_as_string}",
                ["exception_as_string" => (string) $e]
            );
        }
    };
    $contactsThatWereNotFound = function (string $filename_of_attachment, MaybeContact $MaybeContact): bool {
        $doIfEmpty = function (): bool {
            return false;
        };
        return $MaybeContact->getOrElse($doIfEmpty) === false;
    };
    $contactsThatWereFound = function (string $filename_of_attachment, MaybeContact $MaybeContact): bool {
        $doIfEmpty = function (): bool {
            return false;
        };
        return $MaybeContact->getOrElse($doIfEmpty) instanceof Contact;
    };
    $getContact = function (string $filename_of_attachment, MaybeContact $MaybeContact): Contact {
        return $MaybeContact->getOrElse(function () {
        });
    };
    $handleContactNotFoundCase = function (
        string $filename_of_attachment,
        MaybeContact $MaybeContact
    ) use (
        $MailSender,
        $log
    ) {
        $log->error(
            "Attachment not send: {filename_of_attachment}",
            ["filename_of_attachment" => $filename_of_attachment]
        );
        $error_message = "Email Error:" . PHP_EOL
            . "The attached email was not sent to the intended recipient" . PHP_EOL
            . "This could be because the user was not found in your list of"
            . " contacts or an error occured in the program.";

        $MailSender
            ->addSubject("Attachment not sent")
            ->addBody($error_message)
            ->setEmailToUser()
            ->addAttachment($filename_of_attachment)
            ->send();

        $log->info(
            "Error message sent to user"
        );
    };

    $MapOfAttachmentFilenamesToTheirRecipients
        ->filter($contactsThatWereNotFound)
        ->map($handleContactNotFoundCase);

    $MapOfAttachmentFilenamesToTheirRecipients
        ->filter($contactsThatWereFound)
        ->map($getContact)
        ->map($emailAssignmentForms);
}

