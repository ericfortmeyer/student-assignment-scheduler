#!/usr/bin/env php
<?php declare(strict_types=1);

namespace StudentAssignmentScheduler;

use PHPMailer\PHPMailer\PHPMailer;
use Dotenv\Dotenv;
use StudentAssignmentScheduler\{
    ListOfContacts,
    Contact,
    Fullname,
    Notification\MailSender
};
use \Ds\{
    Set,
    Vector
};
use function StudentAssignmentScheduler\Bootstrapping\Functions\{
    buildPath,
    setupKeys
};
use function StudentAssignmentScheduler\Notification\Functions\{
    sendAssignmentForms,
    filenamesMappedToTheirRecipient
};
use function StudentAssignmentScheduler\Utils\Functions\filenamesInDirectory;
use function StudentAssignmentScheduler\Querying\Functions\getContacts;
use function StudentAssignmentScheduler\CLI\setupEmail;

[$config, $path_config, $config_file] = require "bootstrap.php";
// setup email and secret keys if they haven't already been setup
try {
    $path_to_secrets = buildPath(__DIR__, "data", "secrets");
    $env_dir = __DIR__;
    $email_vars = [
        "from_email",
        "from_email_password",
        "from_email_nonce",
        "from_email_key",
        "smtp_host",
    ];
    $secrets_vars = [
        "m",
        "s"
    ];
    $Dotenv = new Dotenv($env_dir);
    $Dotenv->load();
} catch (\Dotenv\Exception\InvalidPathException $e) {
    setupEmail($env_dir); // user interaction
    setupKeys($path_to_secrets, $env_dir);
    $Dotenv->load();
}

try {
    $Dotenv->required($email_vars);
} catch (\Dotenv\Exception\ValidationException $e) {
    setupEmail($env_dir);
    $Dotenv->load();
}

try {
    $Dotenv->required($secrets_vars);
} catch (\Dotenv\Exception\ValidationException $e) {
    setupKeys($path_to_secrets, $env_dir);
    $Dotenv->load();
}
$contacts_dir = buildPath(__DIR__, "data", "contacts");
$contacts_file = buildPath($contacts_dir, "contacts");

$ListOfContacts = getContacts(
    $contacts_file,
    getenv("m"),
    getenv("s")
);

$email = "lammo_huntsville@icloud.com";
$passwd = "yxtx-ryzq-siee-jaoh";
$host = "smtp.mail.me.com";

$MailSender = new MailSender(
    new PHPMailer(true),
    $email,
    $passwd,
    $host
);

$assignment_forms_destination = $config["assignment_forms_destination"];

$appendDestinationToFilename = function (string $basename) use ($assignment_forms_destination): string {
    return buildPath($assignment_forms_destination, $basename);
};

sendAssignmentForms(
    $MailSender,
    filenamesMappedToTheirRecipient(
        new Set(
            (new Vector(filenamesInDirectory($assignment_forms_destination)))
                ->map($appendDestinationToFilename)
        ),
        $ListOfContacts
    )
);
